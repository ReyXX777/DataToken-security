from datetime import datetime
from typing import Optional

class LogEntry:
    def __init__(self, timestamp: str, level: str, user: str, action: str, details: Optional[str] = None):
        self.timestamp = timestamp
        self.level = level
        self.user = user
        self.action = action
        self.details = details

    def __repr__(self):
        return f"LogEntry(timestamp={self.timestamp}, level={self.level}, user={self.user}, action={self.action}, details={self.details})"

class LogManager:
    def __init__(self):
        self.logs = []

    def add_log(self, log_entry: LogEntry):
        self.logs.append(log_entry)

    def filter_logs_by_level(self, level: str):
        return [log for log in self.logs if log.level == level]

    def filter_logs_by_user(self, user: str):
        return [log for log in self.logs if log.user == user]

    def filter_logs_by_action(self, action: str):
        return [log for log in self.logs if log.action == action]

    def get_latest_logs(self, count: int):
        return self.logs[-count:]

    def filter_logs_by_time_range(self, start_time: str, end_time: str):
        return [log for log in self.logs if start_time <= log.timestamp <= end_time]

    def export_logs_to_file(self, filename: str):
        with open(filename, 'w') as file:
            for log in self.logs:
                file.write(f"{log}\n")

    def clear_logs(self):
        self.logs.clear()

    def count_logs_by_level(self, level: str):
        return len([log for log in self.logs if log.level == level])

    def get_unique_users(self):
        return list(set(log.user for log in self.logs))

# Example usage
log_manager = LogManager()
log_manager.add_log(LogEntry(timestamp="2023-10-21 15:30:05", level="INFO", user="Alice", action="logged in successfully"))
log_manager.add_log(LogEntry(timestamp="2023-10-21 15:30:07", level="INFO", user="Alice", action="performed", details="VIEW"))
log_manager.add_log(LogEntry(timestamp="2023-10-21 15:30:08", level="WARNING", user="Alice", action="attempted", details="DELETE"))
log_manager.add_log(LogEntry(timestamp="2023-10-21 15:30:09", level="ERROR", user="Alice", action="error", details="File not found"))
log_manager.add_log(LogEntry(timestamp="2023-10-21 15:30:10", level="INFO", user="Alice", action="logged out"))

# Filter logs by level, user, and action
info_logs = log_manager.filter_logs_by_level("INFO")
alice_logs = log_manager.filter_logs_by_user("Alice")
action_logs = log_manager.filter_logs_by_action("logged in successfully")

# Get latest logs
latest_logs = log_manager.get_latest_logs(3)

# New components usage
time_range_logs = log_manager.filter_logs_by_time_range("2023-10-21 15:30:05", "2023-10-21 15:30:09")
log_manager.export_logs_to_file("logs.txt")
log_count = log_manager.count_logs_by_level("INFO")
unique_users = log_manager.get_unique_users()

print("INFO Logs:", info_logs)
print("Alice Logs:", alice_logs)
print("Action Logs:", action_logs)
print("Latest Logs:", latest_logs)
print("Time Range Logs:", time_range_logs)
print("INFO Log Count:", log_count)
print("Unique Users:", unique_users)
